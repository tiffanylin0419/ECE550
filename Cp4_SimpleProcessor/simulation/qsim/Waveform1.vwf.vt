// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2022 12:26:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          skeleton
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module skeleton_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
// wires                                               
wire [11:0] address_imem;
wire dmem_clock;
wire imem_clock;
wire processor_clock;
wire [31:0] q_imem;
wire regfile_clock;

// assign statements (if any)                          
skeleton i1 (
// port map - connection between master ports and signals/registers   
	.address_imem(address_imem),
	.clock(clock),
	.dmem_clock(dmem_clock),
	.imem_clock(imem_clock),
	.processor_clock(processor_clock),
	.q_imem(q_imem),
	.regfile_clock(regfile_clock),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	clock = #20000 1'b0;
	clock = #20000 1'b1;
	clock = #20000 1'b0;
	clock = #20000 1'b1;
	clock = #20000 1'b0;
	clock = #20000 1'b1;
	clock = #20000 1'b0;
	clock = #20000 1'b1;
	clock = #20000 1'b0;
	clock = #20000 1'b1;
	# 20000;
	repeat(9)
	begin
		clock = 1'b0;
		clock = #20000 1'b1;
		# 20000;
	end
	clock = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

